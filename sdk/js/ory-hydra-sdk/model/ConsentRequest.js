/**
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([
      'ApiClient',
      'model/OAuth2Client',
      'model/OpenIDConnectContext'
    ], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(
      require('../ApiClient'),
      require('./OAuth2Client'),
      require('./OpenIDConnectContext')
    )
  } else {
    // Browser globals (root is window)
    if (!root.OryHydraCloudNativeOAuth20AndOpenIdConnectServer) {
      root.OryHydraCloudNativeOAuth20AndOpenIdConnectServer = {}
    }
    root.OryHydraCloudNativeOAuth20AndOpenIdConnectServer.ConsentRequest = factory(
      root.OryHydraCloudNativeOAuth20AndOpenIdConnectServer.ApiClient,
      root.OryHydraCloudNativeOAuth20AndOpenIdConnectServer.OAuth2Client,
      root.OryHydraCloudNativeOAuth20AndOpenIdConnectServer.OpenIDConnectContext
    )
  }
})(this, function(ApiClient, OAuth2Client, OpenIDConnectContext) {
  'use strict'

  /**
   * The ConsentRequest model module.
   * @module model/ConsentRequest
   * @version Latest
   */

  /**
   * Constructs a new <code>ConsentRequest</code>.
   * @alias module:model/ConsentRequest
   * @class
   */
  var exports = function() {
    var _this = this
  }

  /**
   * Constructs a <code>ConsentRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ConsentRequest} obj Optional instance to populate.
   * @return {module:model/ConsentRequest} The populated <code>ConsentRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports()

      if (data.hasOwnProperty('challenge')) {
        obj['challenge'] = ApiClient.convertToType(data['challenge'], 'String')
      }
      if (data.hasOwnProperty('client')) {
        obj['client'] = OAuth2Client.constructFromObject(data['client'])
      }
      if (data.hasOwnProperty('oidc_context')) {
        obj['oidc_context'] = OpenIDConnectContext.constructFromObject(
          data['oidc_context']
        )
      }
      if (data.hasOwnProperty('request_url')) {
        obj['request_url'] = ApiClient.convertToType(
          data['request_url'],
          'String'
        )
      }
      if (data.hasOwnProperty('requested_scope')) {
        obj['requested_scope'] = ApiClient.convertToType(
          data['requested_scope'],
          ['String']
        )
      }
      if (data.hasOwnProperty('skip')) {
        obj['skip'] = ApiClient.convertToType(data['skip'], 'Boolean')
      }
      if (data.hasOwnProperty('subject')) {
        obj['subject'] = ApiClient.convertToType(data['subject'], 'String')
      }
    }
    return obj
  }

  /**
   * Challenge is the identifier (\"authorization challenge\") of the consent authorization request. It is used to identify the session.
   * @member {String} challenge
   */
  exports.prototype['challenge'] = undefined
  /**
   * @member {module:model/OAuth2Client} client
   */
  exports.prototype['client'] = undefined
  /**
   * @member {module:model/OpenIDConnectContext} oidc_context
   */
  exports.prototype['oidc_context'] = undefined
  /**
   * RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
   * @member {String} request_url
   */
  exports.prototype['request_url'] = undefined
  /**
   * RequestedScope contains all scopes requested by the OAuth 2.0 client.
   * @member {Array.<String>} requested_scope
   */
  exports.prototype['requested_scope'] = undefined
  /**
   * Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you must not ask the user to grant the requested scopes. You must however either allow or deny the consent request using the usual API call.
   * @member {Boolean} skip
   */
  exports.prototype['skip'] = undefined
  /**
   * Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client.
   * @member {String} subject
   */
  exports.prototype['subject'] = undefined

  return exports
})
